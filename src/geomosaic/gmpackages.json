{
    "order": [
        "pre_processing",
        "func_classification_rb",
        "tax_classification_rb",
        "assembly",
        "assembly_readmapping",
        "assembly_qc",
        "assembly_coverage",
        "assembly_tax_annotation",
        "orf_prediction",
        "assembly_func_annotation",
        "domain_annotation",
        "assembly_hmm_annotation",
        "binning",
        "binning_derep",
        "binning_qa",
        "mags_retrieval",
        "mags_func_annotation",
        "mags_tax_annotation",
        "mags_orf_prediction",
        "mags_domain_annotation",
        "mags_coverage",
        "mags_hmm_annotation"
    ],

    "graph": [
        ["pre_processing", "func_classification_rb"],
        ["pre_processing", "tax_classification_rb"],
        ["pre_processing", "assembly"],
        ["pre_processing", "assembly_readmapping"],
        ["pre_processing", "mags_coverage"],
        
        ["assembly", "assembly_readmapping"],
        ["assembly", "assembly_qc"],
        ["assembly", "assembly_tax_annotation"],
        ["assembly", "orf_prediction"],
        ["assembly", "binning"],
        ["assembly", "binning_derep"],
        ["assembly", "binning_qa"],

        ["assembly_readmapping", "assembly_coverage"],
        ["assembly_readmapping", "binning"],

        ["assembly_coverage", "assembly_hmm_annotation"],

        ["orf_prediction", "assembly_hmm_annotation"],
        ["orf_prediction", "domain_annotation"],
        ["orf_prediction", "assembly_func_annotation"],

        ["binning", "binning_derep"],

        ["binning_derep", "binning_qa"],
        ["binning_derep", "mags_retrieval"],

        ["binning_qa", "mags_retrieval"],

        ["mags_retrieval", "mags_orf_prediction"],
        ["mags_retrieval", "mags_func_annotation"],
        ["mags_retrieval", "mags_tax_annotation"],
        ["mags_retrieval", "mags_coverage"],

        ["mags_orf_prediction", "mags_domain_annotation"],
        ["mags_orf_prediction", "mags_hmm_annotation"],

        ["mags_coverage", "mags_hmm_annotation"]        
    ],

    "modules": {
        "pre_processing": {
            "description": "Module: Pre processing with quality check",
            "choices": {
                "fastp": "fastp",
                "Trim-Galore": "trimgalore",
                "Trimmomatic": "trimmomatic"
            }
        },
            
        "func_classification_rb": {
            "description": "Module: Functional classification [Read-based]",
            "choices": {
                "mi-faser (GS-21-all)": "mifaser"                
            }
        },
    
        "tax_classification_rb": {
            "description": "Module: Taxonomic classification [Read-based]",
            "choices": {
                "Kaiju": "kaiju",
                "MetaPhlAn": "metaphlan"
            }
    
        },
    
        "assembly": {
            "description": "Module: Assembly",
            "choices": {
                "MetaSpades": "metaspades",
                "MegaHit": "megahit"
            }
        },
    
        "assembly_qc": {
            "description": "Module: Assembly evaluation with metrics [Assembly-based]",
            "choices": {
                "Quast": "quast"
            }
        },

        "assembly_readmapping": {
            "description": "Module: Assembly evaluation by read mapping [Assembly-based]",
            "choices": {
                "Bowtie2": "bowtie2",
                "BBMap": "bbmap"
            }
    
        },

        "assembly_coverage": {
            "description": "Module: Assembly coverage computation [Assembly-based]",
            "choices": {
                "CoverM (Contigs)": "coverm"
            }
        },

        "assembly_tax_annotation": {
            "description": "Module: Taxonomic Annotation on Assembly [Assembly-based]",
            "choices": {
                "Kraken2": "kraken2"
            }
        },

        "orf_prediction": {
            "description": "Module: perform ORF prediction [Assembly-based]",
            "choices": {
                "Prodigal": "prodigal"
            }
        },

        "domain_annotation": {
            "description": "Module: Domain annotation on Assembly [Assembly-based]",
            "choices": {
                "reCOGnizer": "recognizer"
            }
        },        

        "assembly_hmm_annotation": {
            "description": "Module: tracking coverage for genes of interest through HMM models [Assembly-based]",
            "choices": {
                "HMMs Search on Assembly": "hmms_search"
            }
        },

        "assembly_func_annotation": {
            "description": "Module: Functional Annotation on Assembly [Assembly-based]",
            "choices": {
                "eggNOG-Mapper": "eggnog_mapper"
            }
        },

        "binning": {
            "description": "Module: Binning",
            "choices": {
                "MaxBin2 + MetaBat2 + Concoct": "multi_binners"
            }    
        },

        "binning_derep": {
            "description": "Module: Binning Deeplication [Binning-based]",
            "choices": {
                "DAS_tool": "das_tool"
            }  
        },

        "binning_qa": {
            "description": "Module: Binning Quality Evaluation [Binning-based]",
            "choices": {
                "CheckM": "checkm"
            }
        },

        "mags_retrieval": {
            "description": "Module: get MAGs based on Contamination and Completeness threshold [Binning-based]",
            "choices": {
                "MAGs HQ": "mags"
            }
        },

        "mags_func_annotation": {
            "description": "Module: Perform annotation of filtered MAGs [Binning-based]",
            "choices": {
                "DRAM on MAGs": "mags_dram"
            }
        },

        "mags_tax_annotation": {
            "description": "Module: Perform taxonomic annotation of filtered MAGs [Binning-based]",
            "choices": {
                "GTDBTK on MAGs": "mags_gtdbtk"
            }
        },

        "mags_orf_prediction": {
            "description": "Module: perform ORF prediction for each retrieved MAG [Binning-based]",
            "choices": {
                "Prodigal on MAGs": "mags_prodigal"
            }
        },

        "mags_domain_annotation": {
            "description": "Module: perform domain-based annotation for each retrieved MAG [Binning-based]",
            "choices": {
                "reCOGnizer on MAGs": "mags_recognizer"
            }
        },

        "mags_coverage": {
            "description": "Module: Computing read coverage for each retrieved MAG [Binning-based]",
            "choices": {
                "CoverM (Genome)": "coverm_genome"
            }
        },

        "mags_hmm_annotation": {
            "description": "Module: tracking coverage for genes of interest through HMM models on MAGs [Binning-based]",
            "choices": {
                "HMMSearch on MAGs": "mags_hmmsearch"
            }
        }
    },
    
    "additional_input": {
        "assembly_hmm_annotation": {
            "hmm_folder": {
                "description": "\n[ADDITIONAL PARAMETER REQUEST - ASSEMBLY HMM ANNOTATION] Description: you need to specify also an absolute path to the folder containing the HMM files, which extension must be '.hmm'\nRequired parameter: Absolute path",
                "type": "folder"
            },
            "assembly_hmmsearch_output_folder": {
                "description": "\n[ADDITIONAL PARAMETER REQUEST - ASSEMBLY HMM ANNOTATION] Description: you need to specify a name for the output folder",
                "type": "string"
            }
        },

        "mags_retrieval": {
            "completness_threshold":{
                "description": "\n[ADDITIONAL PARAMETER REQUEST - MAGS RETRIEVAL] Description: COMPLETENESS parameters to filter retrieved bins\nRequired parameter: integer value - Suggested value: 90",
                "type": "integer"
            },
            "contamination_threshold":{
                "description": "\n[ADDITIONAL PARAMETER REQUEST - MAGS RETRIEVAL] Description: CONTAMINATION parameters to filter retrieved bins\nRequired parameter: integer value - Suggested value: 10",
                "type": "integer"
            }
        },

        "mags_hmm_annotation": {
            "hmm_folder": {
                "description": "\n[ADDITIONAL PARAMETER REQUEST - MAGS HMM ANNOTATION] Description: you need to specify also an absolute path to the folder containing the HMM files, which extension must be '.hmm'\nRequired parameter: Absolute path",
                "type": "folder"
            },
            "mags_hmmsearch_output_folder": {
                "description": "\n[ADDITIONAL PARAMETER REQUEST - MAGS HMM ANNOTATION] Description: you need to specify a name for the output folder",
                "type": "string"
            }
        }
    },

    "envs": {
        "bbmap": "bbmap.yaml",
        "bowtie2": "bowtie2.yaml",
        "checkm": "checkm.yaml",
        "coverm": "coverm.yaml",
        "das_tool": "das_tool.yaml",
        "eggnog_mapper": "eggnog_mapper.yaml",
        "fastp": "fastp.yaml",
        "gtdbtk": "gtdbtk.yaml",
        "kaiju": "kaiju.yaml",
        "kraken2": "kraken2.yaml",
        "megahit": "megahit.yaml",
        "metaphlan": "metaphlan.yaml",
        "metaspades": "metaspades.yaml",
        "mifaser": "mifaser.yaml",
        "multi_binners": "multi_binners.yaml",
        "prodigal": "prodigal.yaml",
        "quast": "quast.yaml",
        "recognizer": "recognizer.yaml",
        "trimgalore": "trimgalore.yaml",
        "trimmomatic": "trimmomatic.yaml",
        "mags_dram": "dram.yaml",
        "mags_gtdbtk": "gtdbtk.yaml",
        "mags_prodigal": "prodigal.yaml",
        "mags_recognizer": "recognizer.yaml",
        "coverm_genome": "coverm.yaml"
    },
    
    "external_db": {
        "checkm": {
            "inpfolder": "checkm",
            "outfolder": "checkm_extdb"
        },
        "kaiju": {
            "inpfolder": "kaiju",
            "outfolder": "kaiju_extdb"
        },
        "kraken2": {
            "inpfolder": "kraken2",
            "outfolder": "kraken2_extdb"
        },
        "eggnog_mapper": {
            "inpfolder": "eggnog_mapper",
            "outfolder": "eggnog_mapper_extdb"
        }, 
        "mags_dram": {
            "inpfolder": "mags_dram",
            "outfolder": "mags_dram_extdb"
        },
        "mags_gtdbtk": {
            "inpfolder": "mags_gtdbtk",
            "outfolder": "mags_gtdbtk_extdb"
        },
        "mags_recognizer": {
            "inpfolder": "recognizer",
            "outfolder": "recognizer_extdb"
        },
        "mifaser": {
            "inpfolder": "mifaser",
            "outfolder": "mifaser_extdb"
        },
        "recognizer": {
            "inpfolder": "recognizer",
            "outfolder": "recognizer_extdb"
        }
    },

    "gathering": [
        "mifaser",
        "kaiju",

        "kraken2",
        "eggnog_mapper",
        "recognizer",
        "hmms_search",
        
        "mags_gtdbtk",
        "mags_recognizer",
        "mags_dram",
        "mags_hmmsearch"
    ]
}
